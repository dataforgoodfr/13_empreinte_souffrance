name: Build, Test, Analyze, Release, Push image  and Deploy

on:
  workflow_dispatch:

jobs:
  release-build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      # Initialize runner
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.17.0

      # Build and run services
      #      - name: create external dependencies
      #        run: docker network create traefik-public

      - name: Build using docker compose
        run: docker compose -f docker-compose.yaml up -d

      # Run unit tests
      #      - name: Run unit tests
      #        run: docker compose exec app pnpm test

      # @TODO: Run static code analysis

#       Create a new release
#      - name: Upgrade Corepack
#        run: npm install -g corepack@latest

#      - name: Enable and prepare pnpm
#        run: corepack enable && corepack prepare pnpm@10.11.0 --activate

#      - name: Install ci/cd dependencies
#        run: npm install

#      - name: Run semantic-release
#        if: github.ref_name == 'main'
#        run: npm exec semantic-release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Semantic Release dry run
#        if: github.ref_name != 'main'
#        run: pnpm exec semantic-release --dry-run
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Get current version
#        id: get_version
#        run: |
#          VERSION=main
#          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

#      - name: Display release version number
#        run: echo "The current version is ${{ steps.get_version.outputs.VERSION }}"

      # Push Docker image to registry
      - name: Prepare Docker client certificates
        run: |
          sudo mkdir -p /etc/docker/certs.d/remigirard.dev:5000/
          echo "${{ secrets.REGISTRY_CA_CRT }}" | sudo tee /etc/docker/certs.d/remigirard.dev:5000/ca.crt
          echo "${{ secrets.REGISTRY_CLIENT_CRT }}" | sudo tee /etc/docker/certs.d/remigirard.dev:5000/client.cert
          echo "${{ secrets.REGISTRY_CLIENT_KEY }}" | sudo tee /etc/docker/certs.d/remigirard.dev:5000/client.key

      - name: Verify Docker registry certificates
        run: docker pull remigirard.dev:5000/nonexistent-image || echo "Certificates are valid"

      - name: show current image name
        run: docker image ls

      - run: docker tag empreinte-souffrance_frontend remigirard.dev:5000/admin/empreinte-souffrance_frontend:${{ github.ref_name }}
      - run: docker push remigirard.dev:5000/admin/empreinte-souffrance_frontend:${{ github.ref_name }}

      # Deploy to remote swarm cluster

      #      - run: export DOCKER_HOST=ssh://debian@remigirard.dev
      - name: create .ssh if does not exist
        run: mkdir -p ~/.ssh
      - run: echo "${{secrets.REGISTRY_CERTIFICATE}}" > ~/.ssh/id_rsa
      - run: chmod 600 ~/.ssh/id_rsa

      - run: ssh-keyscan -H remigirard.dev >> ~/.ssh/known_hosts

      - run: curl -k https://remigirard.dev
      - run: docker container ls
        env:
          DOCKER_HOST: ssh://debian@remigirard.dev
      - run: docker pull remigirard.dev:5000/admin/empreinte-souffrance_frontend:${{ github.ref_name }}
        env:
          DOCKER_HOST: ssh://debian@remigirard.dev
      - name: Set DEPLOY_URL
        id: set_deploy_url
        run: echo "DEPLOY_URL=empreinte-souffrance.remigirard.dev" >> $GITHUB_ENV
      - run: docker stack deploy -c docker-compose.prod.yaml --with-registry-auth empreinte-souffrance-${{ github.ref_name }}
        env:
          DEPLOY_URL: ${{ env.DEPLOY_URL }}
          STAGE_NAME: ${{ github.ref_name }}
          DOCKER_HOST: ssh://debian@remigirard.dev
